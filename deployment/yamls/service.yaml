AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.'
    Type: String
  ParentECSStack:
    Description: 'Stack name of parent ECS cluster.'
    Type: String
  DesiredInstances:
    Description: How many instances of this task should we run across our cluster?
    Type: Number
    Default: 2
  DockerTag:
    Description: The tag for the docker instance to deploy
    Type: String
  EnvTag:
    Description: The environment tag for the redis db
    Type: String

Resources:
  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      Cluster:
        'Fn::ImportValue': !Sub '${ParentECSStack}-ClusterName'
      Role: !Ref ServiceRole
      DesiredCount: !Ref DesiredInstances
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: key-kalamity
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: heygamerspigsquadgroup
      ContainerDefinitions:
        - Name: key-kalamity
          Essential: true
          Image: !Ref DockerTag
          Memory: 128
          Environment:
            - Name: PORT
              Value: 80
            - Name: isProd
              Value: true
            - Name: TAG
              Value: !Ref EnvTag
          PortMappings:
            - ContainerPort: 80

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /healthcheck
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        'Fn::ImportValue': !Sub '${ParentECSStack}-Listener'
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
          - '*'
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
              "Effect": "Allow",
              "Principal": { "Service": [ "ecs.amazonaws.com" ]},
              "Action": [ "sts:AssumeRole" ]
          }]
        }
      Policies:
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument:
            {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                    "ec2:AuthorizeSecurityGroupIngress",
                    "ec2:Describe*",
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "elasticloadbalancing:DeregisterTargets",
                    "elasticloadbalancing:DescribeTargetGroups",
                    "elasticloadbalancing:DescribeTargetHealth",
                    "elasticloadbalancing:RegisterTargets"
                ],
                "Resource": "*"
              }]
            }
